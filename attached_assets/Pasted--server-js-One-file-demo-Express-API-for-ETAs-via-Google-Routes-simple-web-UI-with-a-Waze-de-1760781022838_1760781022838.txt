// server.js
// One-file demo: Express API for ETAs via Google Routes + simple web UI with a Waze deep link.

import express from "express";

const app = express();
app.use(express.json());

// Serve a tiny UI
app.get("/", (_req, res) => {
  res.type("html").send(`<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <title>ETA + Waze Deep Link</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial; margin: 24px; max-width: 640px }
    label { display:block; margin: 8px 0 4px }
    input { width:100%; padding:10px; border:1px solid #ccc; border-radius:6px }
    button { padding:10px 14px; border:0; border-radius:6px; cursor:pointer }
    .row { display:flex; gap:10px }
    .row > div { flex:1 }
    .card { padding:16px; border:1px solid #eee; border-radius:10px; margin-top:16px }
    .muted { color:#666 }
  </style>
</head>
<body>
  <h1>ETA calculator with Waze link</h1>
  <p class="muted">Enter coordinates like <code>51.5074,-0.1278</code> or click “Use my location”.</p>

  <div class="row">
    <div>
      <label>Origin lat,lng</label>
      <input id="origin" placeholder="51.5074,-0.1278" />
    </div>
    <div>
      <label>Destination lat,lng</label>
      <input id="dest" placeholder="51.5010,-0.1416" />
    </div>
  </div>

  <div style="margin-top:10px; display:flex; gap:10px;">
    <button id="geoBtn" type="button">Use my location</button>
    <button id="etaBtn" type="button">Get ETA</button>
  </div>

  <div id="out" class="card" style="display:none;"></div>

  <script>
    const originEl = document.getElementById("origin");
    const destEl = document.getElementById("dest");
    const out = document.getElementById("out");

    document.getElementById("geoBtn").onclick = () => {
      if (!navigator.geolocation) return alert("Geolocation not available");
      navigator.geolocation.getCurrentPosition(pos => {
        const { latitude, longitude } = pos.coords;
        originEl.value = latitude.toFixed(6) + "," + longitude.toFixed(6);
      }, err => alert("Could not get location: " + err.message), { enableHighAccuracy:true, timeout:10000 });
    };

    document.getElementById("etaBtn").onclick = async () => {
      const origin = originEl.value.trim();
      const dest = destEl.value.trim();
      if (!/^[-+]?\\d+\\.\\d+\\s*,\\s*[-+]?\\d+\\.\\d+$/.test(origin) || !/^[-+]?\\d+\\.\\d+\\s*,\\s*[-+]?\\d+\\.\\d+$/.test(dest)) {
        return alert("Please enter origin and destination as lat,lng");
      }
      out.style.display = "block";
      out.innerHTML = "Calculating...";

      try {
        const r = await fetch("/api/eta?origin=" + encodeURIComponent(origin) + "&dest=" + encodeURIComponent(dest));
        if (!r.ok) throw new Error("API error " + r.status);
        const data = await r.json();

        const [dLat, dLng] = dest.split(",").map(Number);

        const wazeURL = "waze://?ll=" + dLat + "," + dLng + "&navigate=yes";
        const wazeWeb = "https://waze.com/ul?ll=" + dLat + "%2C" + dLng + "&navigate=yes";

        out.innerHTML = \`
          <div><strong>ETA:</strong> \${data.etaText} (\${data.durationSeconds}s)</div>
          <div><strong>Distance:</strong> \${data.distanceKm.toFixed(1)} km</div>
          <div class="muted">Traffic aware. Source: Google Routes.</div>
          <div style="margin-top:10px; display:flex; gap:10px;">
            <a href="\${wazeURL}"><button type="button">Open in Waze</button></a>
            <a href="\${wazeWeb}" target="_blank" rel="noopener"><button type="button">Open Waze on web</button></a>
          </div>
        \`;
      } catch (e) {
        out.innerHTML = "Failed to get ETA: " + e.message;
      }
    };
  </script>
</body>
</html>`);
});

// ETA endpoint using Google Routes Preferred
app.get("/api/eta", async (req, res) => {
  try {
    const apiKey = process.env.GOOGLE_MAPS_API_KEY;
    if (!apiKey) return res.status(500).json({ error: "Missing GOOGLE_MAPS_API_KEY env var" });

    const origin = (req.query.origin || "").toString();
    const dest = (req.query.dest || "").toString();

    const [oLat, oLng] = origin.split(",").map(Number);
    const [dLat, dLng] = dest.split(",").map(Number);
    if (![oLat, oLng, dLat, dLng].every(n => Number.isFinite(n))) {
      return res.status(400).json({ error: "Invalid coordinates. Use lat,lng" });
    }

    const body = {
      origin: { location: { latLng: { latitude: oLat, longitude: oLng } } },
      destination: { location: { latLng: { latitude: dLat, longitude: dLng } } },
      travelMode: "DRIVE",
      routingPreference: "TRAFFIC_AWARE",
      departureTime: new Date().toISOString(),
      computeAlternativeRoutes: false,
      units: "METRIC"
    };

    const url = "https://routes.googleapis.com/directions/v2:computeRoutes";
    const r = await fetch(url + "?key=" + encodeURIComponent(apiKey), {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        // Field mask trims the response
        "X-Goog-FieldMask": "routes.duration,routes.staticDuration,routes.distanceMeters"
      },
      body: JSON.stringify(body)
    });

    if (!r.ok) {
      const text = await r.text();
      return res.status(500).json({ error: "Routes API error", detail: text });
    }

    const json = await r.json();
    const route = json.routes && json.routes[0];
    if (!route) return res.status(404).json({ error: "No route found" });

    // Durations come like "1234s"
    const parseSeconds = (s) => s ? Number(String(s).replace("s","")) : null;
    const seconds = parseSeconds(route.duration) ?? parseSeconds(route.staticDuration) ?? null;
    const distanceMeters = route.distanceMeters ?? 0;

    res.json({
      durationSeconds: seconds,
      etaText: seconds != null ? fmtDuration(seconds) : "n/a",
      distanceKm: distanceMeters / 1000
    });

  } catch (err) {
    res.status(500).json({ error: err.message || "Unknown error" });
  }
});

function fmtDuration(totalSeconds) {
  const h = Math.floor(totalSeconds / 3600);
  const m = Math.floor((totalSeconds % 3600) / 60);
  const s = Math.floor(totalSeconds % 60);
  if (h > 0) return \`\${h}h \${m}m\`;
  if (m > 0) return \`\${m}m \${s}s\`;
  return \`\${s}s\`;
}

const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log("Server running on http://localhost:" + port);
  console.log("Open the root page to test the ETA and Waze link.");
});